name: Deploy to Production

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch: # Allows manual triggering

env:
  NODE_VERSION: '20'
  PHP_VERSION: '8.3'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv, redis
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Prepare Laravel Application
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:clear

      - name: Run PHP tests
        run: php artisan test --parallel
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1

      - name: Run JavaScript tests (if applicable)
        run: npm run test --if-present

  build:
    name: Build Assets
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production assets
        run: npm run build
        env:
          APP_URL: ${{ secrets.APP_URL }}
          ASSET_URL: ${{ secrets.ASSET_URL }}
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Verify build output
        run: |
          if [ ! -d "public/build/assets" ]; then
            echo "❌ Build failed - assets directory missing"
            exit 1
          fi
          echo "✅ Build successful"
          ls -lah public/build/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: |
            public/build/
            bootstrap/ssr/
          retention-days: 1

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    environment:
      name: production
      url: https://ampcore.fluxnerve.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-assets

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy assets to server
        run: |
          rsync -avz --delete --progress \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            public/build/ ${{ secrets.REMOTE_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.SERVER_PATH }}/public/build/

          rsync -avz --delete --progress \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            bootstrap/ssr/ ${{ secrets.REMOTE_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.SERVER_PATH }}/bootstrap/ssr/

      - name: Deploy application code
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            ${{ secrets.REMOTE_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            cd ${{ secrets.SERVER_PATH }}

            # Pull latest code
            git fetch origin
            git reset --hard origin/main

            # Update dependencies if needed
            docker compose exec -T laravel.test composer install --no-dev --optimize-autoloader --no-interaction

            # Run migrations
            docker compose exec -T laravel.test php artisan migrate --force

            # Clear and cache
            docker compose exec -T laravel.test php artisan optimize:clear
            docker compose exec -T laravel.test php artisan config:cache
            docker compose exec -T laravel.test php artisan route:cache
            docker compose exec -T laravel.test php artisan view:cache

            # Restart queue workers if applicable
            docker compose exec -T laravel.test php artisan queue:restart || true

            echo "✅ Deployment completed successfully"
          ENDSSH

      - name: Health check
        run: |
          for i in {1..5}; do
            if curl -f -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }} | grep -q "200"; then
              echo "✅ Application is healthy"
              exit 0
            fi
            echo "Waiting for application to respond... ($i/5)"
            sleep 10
          done
          echo "❌ Health check failed"
          exit 1

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy_key

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful"
            # Add Slack/Discord webhook here if needed
          else
            echo "❌ Deployment failed"
          fi
