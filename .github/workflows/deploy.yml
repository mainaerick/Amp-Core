name: Deploy to Production

on:
  push:
    branches: [main, production]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PHP_VERSION: '8.3'
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_PATH: ${{ secrets.SERVER_PATH }}
  REMOTE_USER: ${{ secrets.REMOTE_USER }}
  ASSET_URL: ${{ secrets.ASSET_URL }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports: ['3306:3306']

      redis:
        image: redis:alpine
        ports: ['6379:6379']

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, mbstring, pdo_mysql, redis

      - name: Install Composer deps
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci

      - name: Prepare Laravel
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install NPM dependencies
        run: npm ci

      - name: Build Vite assets
        run: npm run build

      - name: Run Tests
        run: php artisan test --parallel
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1

  build:
    name: Build Assets
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci
      - name: Build frontend
        env:
          ASSET_URL: ${{ env.ASSET_URL }}
          NODE_OPTIONS: '--max-old-space-size=4096'
        run: npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: |
            public/build/
            bootstrap/ssr/

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-assets

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Sync built assets
        run: |
          rsync -avz --delete --progress \
            public/build/ ${{ env.REMOTE_USER }}@${{ env.SERVER_IP }}:${{ env.SERVER_PATH }}/public/build/
          rsync -avz --delete --progress \
            bootstrap/ssr/ ${{ env.REMOTE_USER }}@${{ env.SERVER_IP }}:${{ env.SERVER_PATH }}/bootstrap/ssr/

      - name: Run server post-deploy script
        run: ssh -o StrictHostKeyChecking=no ${{ env.REMOTE_USER }}@${{ env.SERVER_IP }} "bash ${{ env.SERVER_PATH }}/deploy/post-deploy.sh"

      - name: Health check
        run: |
          for i in {1..5}; do
            STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" ${{ env.ASSET_URL }} || echo "000")
            if [ "$STATUS" = "200" ]; then
              echo "✅ App is healthy ($STATUS)"
              exit 0
            fi
            echo "⏳ Waiting... ($i/5)"
            sleep 10
          done
          echo "❌ App not responding"
          exit 1
