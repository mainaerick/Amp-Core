name: Deploy to Production

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch: # Allows manual triggering

env:
  NODE_VERSION: '20'
  PHP_VERSION: '8.3'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv, redis
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Generate Ziggy routes for TypeScript
        run: php artisan ziggy:generate

      - name: Build assets for testing
        run: npm run build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Prepare Laravel Application
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:clear

      - name: Run PHP tests
        run: php artisan test --parallel
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1

      - name: Run JavaScript tests (if applicable)
        run: npm run test --if-present

  build:
    name: Build Inertia + React Assets
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Ziggy routes
        run: php artisan ziggy:generate

      - name: Build production assets (Vite + React + SSR)
        run: npm run build
        env:
          APP_URL: ${{ secrets.APP_URL }}
          ASSET_URL: ${{ secrets.ASSET_URL }}
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Verify build output
        run: |
          if [ ! -d "public/build/assets" ]; then
            echo "‚ùå Build failed - client assets directory missing"
            exit 1
          fi
          if [ ! -d "bootstrap/ssr" ]; then
            echo "‚ùå Build failed - SSR directory missing"
            exit 1
          fi
          echo "‚úÖ Client-side build successful"
          ls -lah public/build/
          echo "‚úÖ SSR build successful"
          ls -lah bootstrap/ssr/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: |
            public/build/
            bootstrap/ssr/
          retention-days: 1

  deploy:
    name: Deploy to Production (Sail)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    environment:
      name: production
      url: https://ampcore.fluxnerve.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-assets

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy assets to server
        run: |
          rsync -avz --delete --progress \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            public/build/ ${{ secrets.REMOTE_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.SERVER_PATH }}/public/build/

          rsync -avz --delete --progress \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            bootstrap/ssr/ ${{ secrets.REMOTE_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.SERVER_PATH }}/bootstrap/ssr/

      - name: Deploy application code and restart services
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            ${{ secrets.REMOTE_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            set -e
            cd ${{ secrets.SERVER_PATH }}

            echo "üì• Pulling latest code..."
            git fetch origin

            # Don't reset vendor/ directory - we need it for Sail
            git reset --hard origin/main

            # If vendor doesn't exist, we need to bootstrap
            if [ ! -d "vendor/laravel/sail" ]; then
                echo "üîß First-time setup: Installing dependencies on host..."
                if command -v composer &> /dev/null; then
                    composer install --ignore-platform-reqs --no-interaction
                else
                    echo "‚ùå Composer not found. Please run initial setup first."
                    exit 1
                fi
            fi

            echo "üîß Setting up environment variables..."
            export WWWUSER=$(id -u)
            export WWWGROUP=$(id -g)

            echo "üê≥ Detecting Docker Compose version..."
            if command -v docker-compose &> /dev/null; then
                DOCKER_COMPOSE="docker-compose"
            else
                DOCKER_COMPOSE="docker compose"
            fi
            echo "Using: $DOCKER_COMPOSE"

            echo "üîÑ Starting containers (rebuilding if needed)..."
            $DOCKER_COMPOSE up -d --build

            echo "‚è≥ Waiting for containers to be ready..."
            sleep 20

            echo "üì¶ Installing Composer dependencies inside container..."
            $DOCKER_COMPOSE exec -T laravel.test composer install --no-dev --optimize-autoloader --no-interaction

            echo "üîÑ Running database migrations..."
            $DOCKER_COMPOSE exec -T laravel.test php artisan migrate --force

            echo "üîó Ensuring storage link exists..."
            $DOCKER_COMPOSE exec -T laravel.test php artisan storage:link || true

            echo "üßπ Clearing all caches..."
            $DOCKER_COMPOSE exec -T laravel.test php artisan optimize:clear

            echo "‚ö° Caching configuration..."
            $DOCKER_COMPOSE exec -T laravel.test php artisan config:cache
            $DOCKER_COMPOSE exec -T laravel.test php artisan route:cache
            $DOCKER_COMPOSE exec -T laravel.test php artisan view:cache

            echo "üîÑ Restarting queue workers..."
            $DOCKER_COMPOSE exec -T laravel.test php artisan queue:restart || true

            echo "‚úÖ Deployment completed successfully"
          ENDSSH

      - name: Wait for application to be ready
        run: |
          echo "‚è≥ Giving application extra time to fully start..."
          sleep 10

      - name: Health check
        run: |
          for i in {1..5}; do
            STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }} || echo "000")
            if [ "$STATUS" = "200" ]; then
              echo "‚úÖ Application is healthy (HTTP $STATUS)"
              exit 0
            fi
            echo "‚è≥ Waiting for application to respond... ($i/5) - Status: $STATUS"
            sleep 10
          done
          echo "‚ùå Health check failed - application not responding"
          exit 1

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy_key

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful to production"
            echo "üîó URL: ${{ secrets.APP_URL }}"
          else
            echo "‚ùå Deployment failed"
            echo "Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi
